参考资料：
http://noalgo.info/category/ds
http://blog.csdn.net/acdreamers/article/details/44656295
数据结构与算法分析 C++ 描述（data structures and algoritm anylisis in c++ ）作者:Mark Allen Weiss



#include<iostream>
#include<string.h>
#include<stdio.h>
#include<time.h>
#include<algorithm>

using namespace std;

const int N = 10005;

int a[N];

//QuickSort
int partition2(int data[], int lo, int hi){
	int pivot = data[hi];
	int i = lo - 1;
	for (int j = lo; j < hi; j++){
		if (data[j] <= pivot){
			i++;
			int temp = data[j];
			data[j] = data[i];
			data[i] = temp;
		}
	}
	data[hi] = data[i + 1];
	data[i + 1] = pivot;
	return i + 1;
}

void QuickSort(int data[], int lo, int hi){
	if (lo < hi){
		int k = partition2(data, lo, hi);
		QuickSort(data, lo, k - 1);
		QuickSort(data, k + 1, hi);
	}
}

//寻找中位数的中位数
int FindMid(int a[], int l, int r)
{
	if (l == r) return a[l];
	int i = 0;
	int n = 0;
	for (i = 1; i < r - 5; i = i + 5)
	{
		QuickSort(a, i, i + 4);
		n = i - l;
		int temp = a[l + n / 5];
		a[l + n / 5] = a[i + 2];
		a[i + 2] = temp;
	}

	int num = r - i + 1;
	if (num>0)
	{
		QuickSort(a, i, i + num - 1);
		n = i - l;
		int temp = a[l + n / 5];
		a[l + n / 5] = a[i + num / 2];
		a[i + num / 2] = temp;
	}
	n = n / 5;
	if (n == l) return a[l];
	return FindMid(a, l, 1 + n);

}
//寻找中位数所在位置
int FindId(int a[], int l, int r, int num){
	for (int i = l; i <= r; i++){
		if (a[i] == num)
			return i;
	}
	return -1;
}

//进行划分过程
int Partition(int a[], int l, int r, int p){
	int temp = a[p];
	a[p] = a[l];
	a[l] = temp;
	int i = l;
	int j = r;
	int pivot = a[l];
	while (i < j)
	{
		while (a[j] >= pivot && i < j)
			j--;
		a[i] = a[j];
		while (a[i] <= pivot && i < j)
			i++;
		a[j] = a[i];
	}
	a[i] = pivot;
	return i;
}


int BFPTR(int a[], int l, int r,int k){
	int num = FindMid(a, l, r);//寻找中位数的中位数
	int p = FindId(a,l,r,num);//寻找中位数的中位数对应的ID
	int i = Partition(a,l,r,p);

	int m = i - l + 1;
	if (m == k) return a[i];
	if (m > k) return BFPTR(a, l, i - 1, k);
	return BFPTR(a, i + 1, r, k - m);
}

int main(){
	int a[] = { 1, 2, 3,3, 4, 5, 6, 7, 8, 9 };
	cout << BFPTR(a, 0, 8, 5);
	getchar();
}
