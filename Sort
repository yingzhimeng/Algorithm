插入排序(InsertSort)：java
时间复杂度：z最好：O(n) 最坏：O(n^2)
package InsertSort;
public class InsertSort {
	public void sort(int []a){
		for(int j=1;j<a.length;j++){
			int key=a[j];
			int i=j-1;
			while(i>=0&&a[i]>key){
				a[i+1]=a[i];
				i--;
			}
			a[i+1]=key;			
		}
	}
	public static void main(String[] args) {
		InsertSort s=new InsertSort();
		int[] a={2,3,5,6,1,3,2,7,9,3};
		s.sort(a);
		for(int i=0;i<a.length;i++){
			System.out.print(a[i]+" ");
		}
	}
}


选择排序(Selection Sort):java
时间复杂度： 最好=最坏： O(n^2)
public class SelectionSort {
	public static void sort(int[] a){
		int smallest;
		for(int i=0;i<a.length-1;i++){
			smallest=a[i];
			int position=i;
			for(int j=i+1;j<a.length;j++){
				if(a[j]<smallest){
					smallest=a[j];
					position =j;
				}
					
				
			}
			a[position]=a[i];
			a[i]=smallest;
		}
	}
	public static void main(String[] args) {
		int[] a={5,4,3,2,1};
		sort(a);
		for(int temp:a){
			System.out.print(temp+" ");
		}
	}
}

快速排序(QuickSort)：C++
时间复杂度:平均：O(nlogn),最坏：O(n^2)
#include<iostream>
#include<string>
#include<algorithm>
#include<vector>

using namespace std;


int partition1(int data[], int lo, int hi){
	int pivot = data[lo];
	int i = lo;
	int j = hi;
	while (i < j){
		while (data[i] <= pivot){
			i++;
		}

		while (data[j]>pivot){
			j--;
		}
		if (i < j){
			int temp = data[i];
			data[i] = data[j];
			data[j] = temp;
		}
		
	}
	int temp = data[j];
	data[j] = pivot;
	data[lo] = temp;
	return j;
}

void QuickSort1(int data[], int lo, int hi){
	if (lo < hi){
		int k = partition1(data, lo, hi);
		QuickSort1(data, lo, k - 1);
		QuickSort1(data, k + 1, hi);
	}
	
}


int partition2(int data[], int lo, int hi){
	int pivot = data[hi];
	int i = lo - 1;
	for (int j = lo; j < hi; j++){
		if (data[j] <= pivot){
			i++;
			int temp = data[j];
			data[j] = data[i];
			data[i] = temp;
		}
	}
	data[hi] = data[i + 1];
	data[i + 1] = pivot;
	return i + 1;
}

void QuickSort(int data[],int lo, int hi){
	if (lo < hi){
		int k = partition2(data, lo, hi);
		QuickSort(data, lo, k - 1);
		QuickSort(data, k + 1, hi);
	}
}
int main(){
	int data[] = { 5, 4, 3, 2, 1 };
	QuickSort(data, 0, 4);
	for (int i = 0; i < 5; i++){
		cout << data[i] << " ";
	}
	getchar();
}

